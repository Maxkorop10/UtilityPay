// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int       @id @default(autoincrement())
  fullname  String    // Ім'я користувача
  phone     String    @unique
  password  String    // Пароль користувача
  addresses Address[] // Один користувач може мати кілька адрес
  cart      Cart?     // Користувач має одну корзину
  sessions  Session[] // Список сесій користувача
  transactions Transactions[]
}

model Address {
  id       Int       @id @default(autoincrement())
  address  String    // Повна адреса
  userId Int
  user    User  @relation(fields: [userId], references: [id])
  services Service[] // Послуги, пов'язані з цією адресою
  debts Debt[]
}

model Company {
  id        Int          @id @default(autoincrement())
  name      String
  services  AvailableService[] // Компанія надає кілька доступних послуг
}

model AvailableService {
  id           Int     @id @default(autoincrement())
  name         String
  unitPrice    Float   // Ціна за одиницю спожитої послуги
  companyId    Int
  company      Company @relation(fields: [companyId], references: [id]) // Прив'язка до компанії
  services     Service[] // Послуги, надані через цю доступну послугу
  debts Debt[]
}

model Service {
  id                 Int     @id @default(autoincrement())
  addressId          Int
  address            Address @relation(fields: [addressId], references: [id]) // Прив'язка до адреси
  availableServiceId Int
  availableService   AvailableService @relation(fields: [availableServiceId], references: [id]) // Прив'язка до доступної послуги
  consumedUnits      Int    // Кількість спожитих одиниць
  totalPrice         Float  // Сума до оплати
  cartId             Int?   // Поле може бути null
  cart               Cart?  @relation(fields: [cartId], references: [id]) // Зв'язок із корзиною
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int @unique
  user      User      @relation(fields: [userId], references: [id]) // Прив'язка до користувача
  services  Service[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) // Прив'язка до користувача
  token     String   // Токен для сесії
  createdAt DateTime @default(now()) // Час створення сесії
}

model Transactions {
  id Int @id @default(autoincrement())
  user      User  @relation(fields: [userId], references: [id])
  userId    Int
  title String
  totalPrice Float
  createdAt DateTime @default(now())
}

model Debt {
  id Int @id @default(autoincrement())
  addressId          Int
  address            Address @relation(fields: [addressId], references: [id]) // Прив'язка до адреси
  availableServiceId Int
  availableService   AvailableService @relation(fields: [availableServiceId], references: [id]) // Прив'язка до доступної послуги
  price         Float
}